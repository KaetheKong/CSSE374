digraph G {
    fontname = "Bitstream Vera Sans"
    rankdir = BT
    fontsize = 8
    node [
	 fontname = "Bitstream Vera Sans"
	 fontsize = 8
	 shape = "record"
    ]
    edge [
	 fontname = "Bitstream Vera Sans"
	 fontsize = 8
    ]
    Runtime[
	 label = "{Runtime\n\<\<Singleton\>\>|- currentRuntime : java.lang.Runtime\l|+ getRuntime() : java.lang.Runtime\l+ exit(int) : void\l+ addShutdownHook(java.lang.Thread) : void\l+ removeShutdownHook(java.lang.Thread) : boolean\l+ halt(int) : void\l+ runFinalizersOnExit(boolean) : void\l+ exec(java.lang.String) : java.lang.Process\l+ exec(java.lang.String, java.lang.String[]) : java.lang.Process\l+ exec(java.lang.String, java.lang.String[], java.io.File) : java.lang.Process\l+ exec(java.lang.String[]) : java.lang.Process\l+ exec(java.lang.String[], java.lang.String[]) : java.lang.Process\l+ exec(java.lang.String[], java.lang.String[], java.io.File) : java.lang.Process\l+ availableProcessors() : int\l+ freeMemory() : long\l+ totalMemory() : long\l+ maxMemory() : long\l+ gc() : void\l- runFinalization0() : void\l+ runFinalization() : void\l+ traceInstructions(boolean) : void\l+ traceMethodCalls(boolean) : void\l+ load(java.lang.String) : void\l? load0(java.lang.Class, java.lang.String) : void\l+ loadLibrary(java.lang.String) : void\l? loadLibrary0(java.lang.Class, java.lang.String) : void\l+ getLocalizedInputStream(java.io.InputStream) : java.io.InputStream\l+ getLocalizedOutputStream(java.io.OutputStream) : java.io.OutputStream\l}"
	 style="solid"
	 color="blue"
    ]
    Reader[
	 label = "{\<\<abstract\>\>\nReader\n|- skipBuffer : char[]\l# lock : java.lang.Object\l- maxSkipBufferSize : int\l|+ read(java.nio.CharBuffer) : int\l+ read() : int\l+ read(char[]) : int\l+ read(char[], int, int) : int\l+ skip(long) : long\l+ ready() : boolean\l+ markSupported() : boolean\l+ mark(int) : void\l+ reset() : void\l+ close() : void\l}"
    ]
    BufferedReader[
	 label = "{BufferedReader\n|- INVALIDATED : int\l- defaultCharBufferSize : int\l- markedSkipLF : boolean\l- in : java.io.Reader\l- readAheadLimit : int\l- nextChar : int\l- defaultExpectedLineLength : int\l- nChars : int\l- skipLF : boolean\l- UNMARKED : int\l- markedChar : int\l- cb : char[]\l|- ensureOpen() : void\l- fill() : void\l+ read() : int\l- read1(char[], int, int) : int\l+ read(char[], int, int) : int\l? readLine(boolean) : java.lang.String\l+ readLine() : java.lang.String\l+ skip(long) : long\l+ ready() : boolean\l+ markSupported() : boolean\l+ mark(int) : void\l+ reset() : void\l+ close() : void\l+ lines() : java.util.stream.Stream\l}"
    ]
    edge [
	 style = "solid"
    ]

    Runtime->Runtime

    edge [
	 style = "solid"
	 arrowhead = "open"
	 label = ""
    ]

    Runtime->Runtime
    Reader->char[]
    BufferedReader->Reader
    BufferedReader->char[]

    edge [
	 style = "dashed"
	 arrowhead = "open"
	 label = ""
    ]

    Runtime->RuntimePermission
    Runtime->SecurityException
    Runtime->IllegalArgumentException
    Runtime->StringTokenizer
    Runtime->ProcessBuilder
    Runtime->File
    Runtime->UnsatisfiedLinkError
    Runtime->StringBuilder
    Reader->NullPointerException
    Reader->IllegalArgumentException
    Reader->IOException
    BufferedReader->IllegalArgumentException
    BufferedReader->IOException
    BufferedReader->IndexOutOfBoundsException
    BufferedReader->StringBuffer
    BufferedReader->BufferedReader1

    edge [
	 style = "solid"
	 arrowhead = "empty"
	 label = ""
    ]

    Runtime->Object
    Reader->Object
    BufferedReader->Reader

    edge [
	 style = "dashed"
	 arrowhead = "empty"
	 label = ""
    ]

    Reader->Readable
    Reader->Closeable

} 
